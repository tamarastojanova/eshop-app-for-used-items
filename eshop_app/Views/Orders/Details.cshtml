@model eshop_app.Models.Order

@{
    ViewBag.Title = "Details";
    bool CanAssign = (bool)ViewBag.CanAssign;
    List<eshop_app.Models.DeliveryPerson> DeliveryPeople = (List<eshop_app.Models.DeliveryPerson>)ViewBag.DeliveryPeople;
    /*List<eshop_app.Models.Item> items = (List<eshop_app.Models.Item>)ViewBag.Items;
    List<int> quantities = (List<int>)ViewBag.Quantities;*/
    Dictionary<eshop_app.Models.Item, int> dict = (Dictionary<eshop_app.Models.Item, int>)ViewBag.Items;
}

<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css" integrity="sha384-rv+RDEpLKN3W5qKZAZR5NCrjK1cFeJQbZ8igcNLx1RJbqbrtHIp1m5En2brvLcIn" crossorigin="anonymous">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" integrity="sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8sh+WyO8f+xtB+yjOuZ4a8a5EYEhSCOjpF" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css" integrity="sha384-rv+RDEpLKN3W5qKZAZR5NCrjK1cFeJQbZ8igcNLx1RJbqbrtHIp1m5En2brvLcIn" crossorigin="anonymous">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.css" rel="stylesheet">
    <style>

        .form-horizontal {
            max-width: 600px; /* Adjust the max-width as needed */
            margin: auto;
        }

        .form-group {
            margin-bottom: 20px; /* Adjust the margin between form groups */
            margin-left: 27%;
        }

        span {
            display: block;
            font-weight: bold;
            margin-bottom: 8px;
        }

        input[type="text"],
        input[type="url"] {
            width: 100%;
            padding: 10px;
            border-radius: 10px;
            border: 1px solid #E1B800; /* Border color */
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Box shadow */
            margin-bottom: 10px;
            box-sizing: border-box;
        }

        .form-control {
            width: 100%;
            padding: 10px;
            border-radius: 10px;
            border: 1px solid #E1B800; /* Border color */
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Box shadow */
            margin-bottom: 10px;
            box-sizing: border-box;
        }

        h2 {
            margin-top: 3%;
            text-align: center;
        }

        body {
            margin: 0;
            padding: 0;
            background-color: #F8F9FA;
        }

        .container.body-content {
            margin-top: 0; /* Remove the default top margin */
            margin-bottom: 0;
        }

        .form-container {
            max-width: 600px;
            margin: 0 auto;
            background-color: white;
            padding: 20px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            border-radius: 10px;
            margin-top: 20px;
        }


        .form-group {
            margin-bottom: 20px;
        }

        .form-control {
            border-radius: 5px;
        }

        .btn-fancy {
            padding: 0.4rem;
            background-color: #FED959;
            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
            font-size: 18.5px;
            font-family: "Times New Roman";
            border: none;
            border-radius: 10px;
            text-decoration: none;
            display: inline-block;
            transition: background-color 0.3s ease;
            color: white;
            margin-right: -3%;
        }

            .btn-fancy i {
                margin-right: 0.2rem;
                margin-left: 0.4rem;
                margin-top: 0.2rem;
            }

            .btn-fancy:hover {
                background-color: #FFD547;
                color: white;
            }

        .btn-container {
            text-align: center;
        }

            .btn-container button {
                margin: 0 10px;
            }

        table {
            font-family: Arial;
            width: 70%; /* Adjust the table width as needed */
            margin: auto; /* Center the table on the page */
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1); /* Add a subtle shadow to the table */
            margin-top: 1%;
        }

        th, td {
            text-align: center;
            vertical-align: middle;
            padding: 10px;
        }

        dl div {
            text-align: center;
        }

        dl {
            font-size: 1.2rem;
        }

        .sec {
            margin-top: 3%;
        }

        dt {
            margin-bottom: 1%;
        }
        .back {
            background-color: lightgrey;
        }
        .back:hover {
            background-color: lightsteelblue;
        }
        .sec {

        }
    </style>
</head>

<h2>Details for order with tracking number @Model.TrackingNumber</h2>
<hr />


<div>
    <dl class="dl-horizontal row">
        <div class="col-md-6">
            <dt>
                Tracking number:
            </dt>

            <dd>
                @Html.DisplayFor(model => model.TrackingNumber)
            </dd>

            <dt>
                Order made by:
            </dt>

            <dd>
                <img src="@Model.Customer.ProfilePicture" alt="Profile Picture" style="width: 60px; height: 60px; border-radius: 30px; box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3); margin-right: 4%; margin-bottom: 3%;"> @Html.DisplayFor(model => model.Customer.UserName)
                <br />
                @Html.DisplayFor(model => model.Customer.Name) @Html.DisplayFor(model => model.Customer.Surname)
                <br />
                <text>Contact:</text> @Html.DisplayFor(model => model.Customer.Email)
            </dd>

            <dt>
                Assigned delivery person:
            </dt>

            <dd>
            <dd>
                @if (Model.DeliveryPerson != null)
                {
                    <img src="@Model.DeliveryPerson.ProfilePicture" alt="Profile Picture" style="width: 60px; height: 60px; border-radius: 30px; box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3); margin-right: 4%; margin-bottom: 3%;">
                    @Html.DisplayFor(model => model.DeliveryPerson.Name) @Html.DisplayFor(model => model.DeliveryPerson.Surname)
                    <br />
                    <text>Contact: </text>@Html.DisplayFor(model => model.DeliveryPerson.Email)
                }
                else
                {
                    <p>A delivery person has not been assigned yet.</p>
                    if (CanAssign)
                    {
                        <button id="assignDeliveryPersonBtn" class="btn btn-fancy" style="margin-top: 1%;">Assign delivery person</button>
                        <div id="assignDeliveryPersonSection" style="display: none;">
                            <select id="deliveryPersonDropdown">
                                <option value="">Select delivery person</option>
                                @foreach (var person in ViewBag.DeliveryPeople)
                                {
                                    <option value="@person.Id">@person.Name @person.Surname</option>
                                }
                            </select>
                            <button id="assignBtn" class="btn btn-fancy" style="margin-top: -1%;">Assign</button>
                            <div id="validationError" class="text-danger" style="display: none;"></div>
                        </div>
                    }
                }
            </dd>
        </div>
        <div class="col-md-6 sec">
            <dt>
                Status:
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Status)
            </dd>

            <dt>
                Date made:
            </dt>

            <dd>
                @Html.DisplayFor(model => model.DateMade)
            </dd>

            <dt>
                Date delivered:
            </dt>

            <dd>
                @if (Model.DateDelivered != null)
                {
                    @Html.DisplayFor(model => model.DateDelivered)
                }
                else
                {
                    var text = "This order has not been delivered yet.";
                    @text
                }
            </dd>

            <dt>
                Delivery address:
            </dt>

            <dd>
                @if (Model.HouseNumber != null)
                {
                    <text>@Html.DisplayFor(model => model.StreetName)
                    @Html.DisplayFor(model => model.HouseNumber),
                    <br />
                    @Html.DisplayFor(model => model.CityName)
                    @Html.DisplayFor(model => model.Zip),
                    <br />
                    @Html.DisplayFor(model => model.CountryName)</text>
                }
                else
                {
                    <text>@Html.DisplayFor(model => model.StreetName)
                    @Html.DisplayFor(model => model.HouseNumber),
                    <br />
                    @Html.DisplayFor(model => model.CityName),
                    @Html.DisplayFor(model => model.CountryName)</text>
                }
            </dd>
        </div>
    </dl>

    <button id="showItemsBtn" onclick="showItems()" class="btn btn-primary btn-fancy" style="margin-left: 50%; margin-top: 0%;">Show Items</button>

    <div id="for-items" style="display: none;">
        <div class="row" style="margin-left: 5%;">
            <div id="itemsTable" class="col-md-8">
                <table style="margin-top: 4%;">
                    <thead>
                        <tr>
                            <th>Main image</th>
                            <th>Listing title</th>
                            <th>Quantity</th>
                            <th>Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in dict)
                        {
                            <tr>
                                <td>
                                    <img src="@item.Key.MainImage" alt="Item image" width="100" height="100" />
                                </td>
                                <td>
                                    @Html.DisplayFor(model => item.Key.ListingTitle)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => item.Value)
                                </td>
                                <td>
                                    @(item.Value * item.Key.Price)
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="col-md-2 sec d-flex flex-column justify-content-center text-center align-items-center">
                <span>
                    Subtotal: @(dict.Sum(item => item.Value * item.Key.Price).ToString("C"))
                </span>
                <span>
                    Shipping cost: @(CalculateShippingCost(dict).ToString("C"))
                </span>
                <span>
                    Total cost: @((dict.Sum(item => item.Value * item.Key.Price) + CalculateShippingCost(dict)).ToString("C"))
                </span>
                <button id="hideItemsBtn" onclick="hideItems()" class="btn btn-danger back" style="display: none;">
                    <i class="fa fa-times"></i>Hide Items
                </button>
            </div>
            </div>
        </div>

        <br />
        <button type="button" onclick="window.location.href='@Url.Action("Index")'" class="btn btn-fancy back" style=" margin-left: 0%;">
            <i class="fa fa-arrow-left"></i> Back
        </button>

        @section scripts {
            <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
            <script>
        $(document).ready(function () {
            // Handle "Assign Delivery Person" button click
            $('#assignDeliveryPersonBtn').on('click', function () {
                $('#assignDeliveryPersonSection').show();
                $(this).hide();
            });

            /*$(document).ready(function () {
                // Handle "Show Items" button click
                $('#showItemsBtn').on('click', function () {
                    document.getElementById('showItemsBtn').style.display = 'none';

                    var itemsTable = document.getElementById('itemsTable');
                    itemsTable.style.display = 'block';
                    itemsTable.style.opacity = 0;

                    // Animate the opacity
                    var opacity = 0;
                    var animationInterval = setInterval(function () {
                        if (opacity < 1) {
                            opacity += 0.1;
                            itemsTable.style.opacity = opacity;
                        } else {
                            clearInterval(animationInterval);
                        }
                    }, 100);

                    var itemsTable = document.getElementById('hideItemsBtn');
                    hideItemsBtn.style.display = 'block';
                });

                // Handle "Hide Items" button click
                $('#hideItemsBtn').on('click', function () {
                    $(this).hide();
                    $('#itemsTable').slideUp();
                    $('#showItemsBtn').show();
                });
            });*/

            // Handle "Assign" button click
            $('#assignBtn').on('click', function () {
                var orderId = @Model.Id; // Replace with actual property representing the order ID
                var deliveryPersonId = $('#deliveryPersonDropdown').val();

                if (deliveryPersonId !== '') {
                    // Perform Ajax request to Assign action
                    $.ajax({
                        url: '@Url.Action("Assign", "Orders")',
                        type: 'POST',
                        data: { orderId: orderId, deliveryPersonId: deliveryPersonId },
                        success: function () {
                            // Handle success, e.g., refresh the page or update UI
                            location.reload(); // Example: reload the page
                        },
                        error: function () {
                            // Handle error
                            alert('Error assigning delivery person.');
                        }
                    });
                } else {
                    $('#validationError').text('Please select a delivery person').show();
                }
            });
        });

        function showItems() {
            // Hide the "Show Items" button
            document.getElementById('showItemsBtn').style.display = 'none';

            // Show the items table with animation
            var itemsTable = document.getElementById('for-items');
            itemsTable.style.display = 'block';
            itemsTable.style.opacity = 0;

            // Animate the opacity
            var opacity = 0;
            var animationInterval = setInterval(function () {
                if (opacity < 1) {
                    opacity += 0.1;
                    itemsTable.style.opacity = opacity;
                } else {
                    clearInterval(animationInterval);
                }
            }, 100);

            // Show the "Hide Items" button
            document.getElementById('hideItemsBtn').style.display = 'inline-block';
        }

        function hideItems() {
            // Hide the items table with animation
            var itemsTable = document.getElementById('for-items');
            itemsTable.style.opacity = 1;

            // Animate the opacity
            var opacity = 1;
            var animationInterval = setInterval(function () {
                if (opacity > 0) {
                    opacity -= 0.1;
                    itemsTable.style.opacity = opacity;
                } else {
                    clearInterval(animationInterval);
                    itemsTable.style.display = 'none';
                }
            }, 100);

            // Show the "Show Items" button
            document.getElementById('showItemsBtn').style.display = 'inline-block';

            // Hide the "Hide Items" button
            document.getElementById('hideItemsBtn').style.display = 'none';
        }
            </script>
        }

        @functions
{
            double CalculateShippingCost(Dictionary<eshop_app.Models.Item, int> dict)
            {
                double weightSum = dict.Sum(item => item.Key.Weight);
                if (weightSum >= 1)
                {
                    return 20.0;
                }
                else if (weightSum >= 0.5)
                {
                    return 10.0;
                }
                else
                {
                    return 5.0;
                }
            }
        }
